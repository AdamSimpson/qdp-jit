General remarks and requirements:
--------------------------------

 - C++ compiler with C++11 support (GCC 4.8.2 and 6.3.0 known to work)

 - CUDA 5.5 or higher (which includes libdevice, CUDA 7/8 known to work)

 - GPUs with compute capability 2.0 (or higher, tested on 20, 35, 50)

 - LLVM (4.0.0/4.0.1 known to work)

 - libdevice included with CUDA7/8 are buggy for double precision -> requires patching (patch_libdevice.sh)
   NVIDIA notified, expect clean version from CUDA 9 on


How to install
--------------

1) build and install LLVM 4.0.1 with the following setup:

- "Release" build (speeds up JIT compilation to the point of negligibility of overhead)
- selected targets: "NVPTX"
- shared libs enabled
- RTTI enabled
- ZLIB/TERMINFO disabled

2) (optional: patch libdevice), pack libdevice

NVIDIA libdevice provides the support for math functions at the PTX language level.
The libdevice is available for each compute capability (sm_35, sm_50, etc.) and can be found in the CUDA installation.

Patching libdevice or not?
I have seen cases (running HMC with Wilson clover on sm_20 and sm_35) where the LLVM NVPTX backend generates an instruction 'rsqrt.approx.ftz.f64'
which according to NVIDIA was introducted in PTX 4.0. The driver on the system I was running on was version 'Kernel Module 346.46' and failed to load
the generated PTX code. Running the same code with driver '367.48' fixed the issue. However if you're stuck with an older driver then you can still
run the code by patching libdevice. The patch requires the assembler/disassembler from LLVM built in step 1:

a) create and cd to an empty directory (call A)
b) patch libdevice: (./patch_libdevice [path to CUDA libdevice])
c) cd to qdp-jit root
d) pack libdevice: (./patch_libdevice [path to A/or libdevice if no patching was done])

otherwise just pack libdevice from the CUDA installation directory


3) build QDP-JIT with the following configuration

- set CUDA path
- set QMP path
- set LLVM path
- only the 'parscalar' arch is supported
- single/double precision is supported


